{
  
    
        "post0": {
            "title": "Tableau rocks",
            "content": "I’m not the worlds biggest fan of all singing and dancing viz dashboards, but the fact is that there are going to be times when they are useful, and at some point you are probably going to work under important people who love visualizations. . I’m very impressed with Tableau. To be honest, when you’ve been around for as long as I have, you get used to be various bits of software like this being market leaders in their little niches because they’re the least dreadful option at what they do. That was depressingly normal for a long time although I’m glad to say it’s getting much rarer. . Still it’s so nice to find something which just works the way it should (and all the more surprising to find that Google has a rival product which is actually really bad!). . Below is a mickey-mouse hello world viz which literally takes about 2 mins to produce but it gives you an idea of the kind of thing you can produce and the way people can interact with them. . If you’re new and you’ve never seen Tableau you can go and download the free version here. . .",
            "url": "https://joedockrill.github.io/blog/misc/2020/06/24/Tableau-rocks.html",
            "relUrl": "/misc/2020/06/24/Tableau-rocks.html",
            "date": " • Jun 24, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Amazon logistics is amazing",
            "content": "I placed an order. They said it would be delivered on Sunday. Then I got a series of messages telling me my order had been split up and dispatched separately so bits of it got to me faster. Then they delivered all 5 parcels to me on the same day. In 3 different vans. .",
            "url": "https://joedockrill.github.io/blog/misc/2020/06/20/Amazon-logistics-is-amazing.html",
            "relUrl": "/misc/2020/06/20/Amazon-logistics-is-amazing.html",
            "date": " • Jun 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Diff two DataFrames",
            "content": "I was just tracking down a bug (it turns out that Python’s datetime handling is a lot of fun) and I came across a very cute bit of code for dumping out the differences between two dataframes. . You’re welcome. . def DiffDataFrames(df1, df2): ne_stacked = (df1 != df2).stack() changed = ne_stacked[ne_stacked] changed.index.names = [&#39;ID&#39;, &#39;Column&#39;] difference_locations = np.where(df1 != df2) changed_from = df1.values[difference_locations] changed_to = df2.values[difference_locations] diff = pd.DataFrame({&#39;DF1&#39;: changed_from, &#39;DF2&#39;: changed_to}, index=changed.index) return diff .",
            "url": "https://joedockrill.github.io/blog/misc/2020/06/19/Diff-two-dataframes.html",
            "relUrl": "/misc/2020/06/19/Diff-two-dataframes.html",
            "date": " • Jun 19, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "First attempt at Titanic: 75%",
            "content": "I’ve finished my first attempt at the titanic survivors competition on kaggle and I scored 75%. . My disappointment (unlike my accuracy), is immeasurable. . I did manage a score of 77% in the beginning but I realised that I was doing some ugly stuff which should never see the light of day so now I have a score of 75 i can actually trust. . I’ll go back to this later and see what I can do with it but I really need to get on with the rest of my course now. . If you’re interested, the notebook is here. .",
            "url": "https://joedockrill.github.io/blog/kaggle/titanic/2020/06/09/First-attempt-at-titanic-75.html",
            "relUrl": "/kaggle/titanic/2020/06/09/First-attempt-at-titanic-75.html",
            "date": " • Jun 9, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Plotting with pairgrids",
            "content": "I’m just sorting out some of my plotting code into a reusable module and I’ve just discovered how cool pairgrids are. Between Matplotlib and Seaborn there isn’t much you can’t do but there’s so much of it that for Python beginners like me it can take some time to discover it all. . For initial data exploration, facetgrids are very useful. We make some kind of x,y plot like money_spent/time_of_day but then split it by some other facet like day_of_week to give us 7 plots instead of one. I used them in my initial titanic exploration to split by passenger class. . g = sns.FacetGrid(data=df, col=&quot;Pclass&quot;) g.map(sns.distplot, &quot;Survived&quot;, kde=False, bins=[0,1,2]) . Pairgrids allow us to choose a variable of interest (like Survived) and plot it against all the other variables at once. This very quickly allows us to see the relationships in the data, and the way I’ve carved up the data so far, it allows us to see that there are very different relationships between certain variables depending on who (or rather what) you are. . Children with a large number of siblings don’t do well. Women start to do badly as their family size increases, but for men it doesn’t make that much difference. This is already pointing us towards some of the interactions we’re going to need to add to our model. . def LogisticPairPlot(df, y, exclude_cols=None): values = df.columns.tolist() values.remove(y) for col in df.columns: #drop non-numeric cols if np.issubdtype(df.dtypes[df.columns.get_loc(col)], np.number) == False: values.remove(col) if exclude_cols is not None: for col in exclude_cols: values.remove(col) g = sns.PairGrid(df, y_vars=y, x_vars=values) g.map(sns.regplot, logistic=True, ci=None) LogisticPairPlot(df, &quot;Survived&quot;, [&quot;PassengerId&quot;]) .",
            "url": "https://joedockrill.github.io/blog/misc/2020/06/02/Plotting-with-pairgrids.html",
            "relUrl": "/misc/2020/06/02/Plotting-with-pairgrids.html",
            "date": " • Jun 2, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "A quick note on regular expressions",
            "content": "In the last post I included a code snippet which uses a regular expression to extract the title from a name in the titanic data. . It just occurred to me that a lot of the people reading the blogs of beginner data scientists, if they aren’t hiring managers (Hi, I love you!), are probably also beginner data scientists, and in a lot of cases, probably quite new to programming. Regular expression patterns (sometimes known as regex) are something you should know about. . Regular expressions can do quite complicated text pattern matching which would often take some quite cumbersome code otherwise. They take a bit of learning and getting used to but I’ll give you the briefest introduction so you can at least understand why it’s worth the effort to learn. . If you’ve already written something similar using string indexing functions, you’re not going to take long to convince. . The names in the titanic data look like these: . Name . Braund, Mr. Owen Harris | . Cumings, Mrs. John Bradley (Florence Briggs Th… | . Heikkinen, Miss. Laina | . Futrelle, Mrs. Jacques Heath (Lily May Peel) | . Allen, Mr. William Henry | . The regular expression I started using to process them was this: [^,]*, s([^.]*) which breaks down into 3 sections, explained with the example “Braund, Mr. Owen Harris”. . RegEx Matches Text . [^,]* | Anything except a comma, multiple times “Braund” | . , s | A comma followed by a space “, “ | . ([^.]*) | Anything except a period, multiple times “Mr” | . The brackets around the third part mean that it is a match group, which we can use to extract the actual value in our code. If I’d wanted to know the surname as well (maybe to turn the name into “Mr Braund”) I could have placed brackets around the first part and the third part of the pattern and extracted them both. . This pattern needed a slight tweak as it failed on one name in the training data. “Rothes, the Countess. of (Lucy Noel Martha Dye…”. This was returning “the Countess” in the match group instead of “Countess”. . The new pattern is [^,]*, s(the s)?([^.]*). A question mark in a regex means zero or one times and the match object returns None when the pattern doesn’t find the optional “the ” in the name. I ignore it anyway and return the second match group which contains the title I’m after. . import re def ExtractTitle(name): ptn = &quot;[^,]*, s(the s)?([^ .]*)&quot; p = re.compile(ptn, re.IGNORECASE) m = p.match(name) if m is not None: return m.group(2) else: print(&quot;FAILED EXTRACTING TITLE FROM: &quot; + name) return None . You should at least now understand how powerful regex patterns can be, and this is probably one of the simplest examples you’re likely to find. If you think about something even a tiny bit more complicated like an email address and the many different ways they can appear, if you try extracting them from larger blocks of text using string indexing functions, you’re going to have a migraine quite quickly. . Luckily, regular expressions have been around since 1951 and appear in some form in most programming languages, even if you have to download a third-party library. Python has a built-in package for them so you just need to import re. . Lastly the web is full of websites which teach you regular expressions and help you build them. RegExr has a great visual editor which lets you edit the pattern with test text underneath so you can see in real time what your changes are doing. There are plenty more like this. Go and play… .",
            "url": "https://joedockrill.github.io/blog/misc/2020/06/01/A-quick-note-on-regular-expressions.html",
            "relUrl": "/misc/2020/06/01/A-quick-note-on-regular-expressions.html",
            "date": " • Jun 1, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Titanic data cleaning and initial exploration",
            "content": "I should really be cracking on with my data science course but I’ve gone on a tangent to play with the Titanic data. . So far I have: . Engineered out a Title column from the names. . This is easy enough with a regular expression. . import re def ExtractTitle(name): p = re.compile(&quot;[^,]*, s(the s)?([^ .]*)&quot;, re.IGNORECASE) m = p.match(name) assert m, &quot;Failed to extract title&quot; return m.group(2) ExtractTitle(&quot;Braund, Mr. Owen Harris&quot;) . &#39;Mr&#39; . Added a Noble flag. . This is for nobility titles like Sir, Countess, Lord, Lady etc. There actually aren’t as many of these in the train data as I expected, if there aren’t more in test then this flag may not be that helpful. . Added SexPlus column. . This is to expand male/female to man/woman/boy/girl. I expect this to be a useful feature as children were obviously not treated in the same way as adults (but I expect that boys were not treated equally to girls). . I’ve chosen 16 as the cut-off point. Legally people were considered completely independent of their parents at 21 at this time, but there were a myriad of points at which children started progressing towards adulthood in different ways. . All I’m interested in is how they were treated in regards to places on lifeboats, and the information from historical accounts suggests that was somewhere around 14-16 but was not clearly defined. . Dealt with missing ages. . 20% of the data does not have an age set. So far I have used median ages based on Title. That’s good enough for men, boys, and married women, but for other females I should be able to look at Parch and SibSp and take a more educated guess at whether they are girls or single women. . Plotting. . After that I did some basic plotting to look at survival rates. . Unsurprisingly women and children did better than men, but within children, girls did better than boys. . There’s nothing especially stunning jumping out at this point. . Next I ran some regression plots to look at survival rates by age on a line. . There is obviously at least one outlier in the male data which may be causing an issue and I need to look at trimming here. Boys and girls needs further attention, possibly by Pclass. . The next things I need to investigate are: . Cabin number. I can get the deck from cabin number but I’m not sure what else, and so few of these are present that I don’t expect it to be much use. | Family groups. I need to look at Parch, SibSp, ticket numbers, cabin numbers etc and try to determine the groups travelling together, and add a column for GroupSize(?) | Ticket numbers. This may be useful as part of family processing but I’m not sure what else I can gather from these. | Fare. The size of the fare may be useful as fare can vary a lot even within Pclass (a 1st class berth was £30 but there were 2 suites going for £870 and presumably a fair bit in the middle). This needs to be in conjunction with trying to calculate a fare per person as some tickets prices appear to be a sum for everyone in that group. | Look at which interactions I want to add. I expect most of the value I’m going to add from this point to come from here. | .",
            "url": "https://joedockrill.github.io/blog/kaggle/titanic/2020/05/31/Titanic-data-cleaning-and-initial-exploration.html",
            "relUrl": "/kaggle/titanic/2020/05/31/Titanic-data-cleaning-and-initial-exploration.html",
            "date": " • May 31, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Some thoughts on the Kaggle Titanic data",
            "content": "So it seems the data science equivalent of “Hello World” is the Titanic survivor problem on Kaggle. . Some thoughts on the data so far before I download it and start playing: . Variable Definition . PassengerId | ID | . Survived | 0 = No, 1 = Yes | . Pclass | Ticket class, 1=1st, 2=2nd, 3=3rd | . Name | Name | . Sex | Sex | . Age | Age in years | . SibSp | # of siblings / spouses aboard the Titanic | . Parch | # of parents / children aboard the Titanic | . Ticket | Ticket number | . Fare | Passenger fare | . Cabin | Cabin number | . Embarked | Port of Embarkation | . Name. . I see a lot of effort going standardising names and I don’t see the value. Is someone known as Colonel as likely to survive as someone known as Mr? Potentially it might be interesting to flag non-standard titles, eg: males NOT known as Mr or Master, females not known as Miss Mrs Mlle, Mme etc, but not to fudge them all to Mr &amp; Mrs. . FWIW the full list of titles seems to be: . ‘Mr’, ‘Master’, ‘Major’, ‘Rev’, ‘Dr’, ‘Col’, ‘Capt’, ‘Don’, ‘Jonkheer’ ‘Mrs’, ‘Miss’, ‘Dr’, ‘Ms’, ‘Mlle’, ‘Mme’, ‘Countess’ . Note that Dr appears in both male and female titles . The names in the data shown in brackets are maiden names as you would expect and this does not appear at first glance to be useful. . titanicfacts.net has a passenger list which indicates where certain passengers were employed by others (eg: nanny/maid/manservant/nurse to other_passenger). This is interesting but doesn’t appear to be in our data, at least from the sample rows I’m seeing so far. These account for 38 first class passengers and I assume that this would be a significant factor if I can engineer it back out of the kaggle data. . SibSp/Parch. . Some people are using family size (SibSp + Parch) as an indicator. “Women and children first” surely took precedence over family sizes and the notion of giving up your place for a family member. If this is a factor then I think it needs treating carefully. One thing which is feasible is the idea that people with family members would have spent time and effort of looking after each other, or even just looking for each other (although the latter probably not a significant factor given the time of the accident; most families would probably have been in bed in their cabins). . Also Parch as one variable is absurd and needs splitting back to Parents and Children. Similarly (if possible) SibSp to Siblings and Spouse although this is potentially more difficult for older passengers. . We know that some children traveled only with a nanny, therefore parch=0 for them. Can I spot those nannies? They must have been more likely to survive. . Ticket. . Some ticket numbers are prefixed PC and W.E.P. – what are these? . There were 29 cross-channel passengers who disembarked in cherbourg (france) or queenstown (ireland). I wonder if I can spot these through ticket numbers or other means? I doubt it but worth a look. . Age. . “If the age is estimated, is it in the form of xx.5”. Watch out for that and decide what to do with it. Is there a point at which older passengers may have been more likely to give up their place on a lifeboat for someone younger? How do survival rates by age look between sexes? . Fare. . This varies massively even within passenger classes. Must be useful. Can probably see which passengers had suites. Some high value tickets also contain multiple cabin numbers which also suggests a certain level of affluence. . Cabin. . Cabin numbers (mostly not present) tell you the deck the cabin was on and this is probably interesting. . Embarked. . Probably insignificant. If it’s a significant factor then I’d need to try and understand why. . Other. . One article I read uses squares and products of base variables as indicators and I don’t understand enough about this generally so it’s a tangent I need to go on shortly. .",
            "url": "https://joedockrill.github.io/blog/kaggle/titanic/2020/05/26/Some-thoughts-on-the-Titanic-Kaggle-data.html",
            "relUrl": "/kaggle/titanic/2020/05/26/Some-thoughts-on-the-Titanic-Kaggle-data.html",
            "date": " • May 26, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Hello World",
            "content": "Here we go again. .",
            "url": "https://joedockrill.github.io/blog/2020/05/26/Hello-World.html",
            "relUrl": "/2020/05/26/Hello-World.html",
            "date": " • May 26, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "Joe Dockrill . I was a professional software developer for about 10 years, but I’ve been programming for over 30. . I first started coding with C++ back when compilers came on boxes full of 3.5″ floppies, tried some 8086 assembly for at least a week, before eventually moving on to Visual Basic which is actually the best language ever (and no, I do not mean that sarcastically). . My professional development career started with some messy client/server/mainframe stuff (MFC/Oracle/IDMS), more VB and then a lot of web development (Asp, .NET, Sql Server etc). I think that’s when my brain gave up hope and moved out. . After a decent sized break away from IT for family reasons, I’m looking for something more interesting and challenging to do for the rest of my working life, so my geek wife pointed me in the direction of data science, and I’m completely hooked. . I’m very interested in deep learning, and I’m currently spending as much time as I can playing with fast.ai. I love the library and their philosophy on pretty much everything fits very nicely with my own. . You can contact me at joedockrill@gmail.com .",
          "url": "https://joedockrill.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://joedockrill.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}